---
swagger: "2.0"
info:
  description: Estos los endpoints seguros de nuxo
  version: 0.0.1
  title: Nuxo
  termsOfService: http://nuxo.com/terms/
  contact:
    email: darwinrc92@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:5000
tags:
- name: Crear Boleta
  description: Crea todas las boletas mediante el servicio Eboleta
  externalDocs:
    description: MÃ¡s informacion en
    url: https://nuxo.cl/
schemes:
- http
paths:
  /api/tickets:
    post:
      tags:
      - Crear Boleta
      summary: Crear Ticket
      description: Emite una Boleta a traves del servicio eboleta.cl
      operationId: emitTicket
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto que debe enviarse para emitir una boleta
        required: true
        schema:
          $ref: '#/definitions/Ticket'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        "405":
          description: Invalid input
  /api/tickets/view/{id}:
    get:
      tags:
      - Crear Boleta
      summary: Ver Ticket mediante ID
      description: Retorna el pdf de la boleta
      operationId: getTicketById
      produces:
      - application/xml
      - application/json
      parameters:
      - name: id
        in: path
        description: ID del ticket a devolver
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
        "404":
          description: pdf no encontrado
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      description: ""
      operationId: updatePetWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of pet that needs to be updated
        required: true
        type: integer
        format: int64
      - name: name
        in: formData
        description: Updated name of the pet
        required: false
        type: string
      - name: status
        in: formData
        description: Updated status of the pet
        required: false
        type: string
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - pet
      summary: Deletes a pet
      description: ""
      operationId: deletePet
      produces:
      - application/xml
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: id
        in: path
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      description: ""
      operationId: uploadFile
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        type: integer
        format: int64
      - name: additionalMetadata
        in: formData
        description: Additional data to pass to server
        required: false
        type: string
      - name: file
        in: formData
        description: file to upload
        required: false
        type: file
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:pets: modify pets in your account
      read:pets: read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Pet:
    type: object
    required:
    - name
    - photoUrls
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      status:
        type: string
        description: pet status in the store
        enum:
        - available
        - pending
        - sold
    xml:
      name: Pet
  Ticket:
    type: object
    properties:
      total:
        type: integer
        format: int64
      typeTicket:
        type: string
      detail:
        type: string
      receiver:
        type: object
        properties:
          name:
            type: string
          address:
            type: string
          email:
            type: string
          rut:
            type: string
    xml:
      name: Ticket
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
